class Solution {
public:
    //memoization
 int fun(int i,int j,string &s1, string &s2, vector<vector<int>>&dp)
  {
      if(i<0)return j+1;
      if(j<0)return i+1;
      if(dp[i][j]!=-1)return dp[i][j];
      
      if(s1[i]==s2[j])
      {
         return dp[i][j]=0+fun(i-1,j-1,s1,s2,dp);
          
      }
      else
      {
         
         return dp[i][j]=1+min(fun(i-1,j-1,s1,s2,dp),min(fun(i-1,j,s1,s2,dp),fun(i,j-1,s1,s2,dp)));
      }
  }

    int minDistance(string s1, string s2) {
         int l1=s1.size(),l2=s2.size();
       vector<vector<  int>>dp(l1+1,vector< int>(l2+1,-1));
       return fun(l1-1,l2-1,s1,s2,dp);
               
        /*
        //tabulation method
        vector<vector<  int>>dp(l1+1,vector< int>(l2+1,0));
        //converting 0 based indexing to -1 based indexing
        for(int i=0;i<=l1;i++)
        {
            dp[i][0]=i;
            
        }
        for(int j=0;j<=l2;j++)
        {
            dp[0][j]=j;
            
        }
        for(int i=1;i<=l1;i++)
        {
            for(int j=1;j<=l2;j++)
            {
                if(s1[i-1]==s2[j-1])
                {
                    dp[i][j]=0+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]));
                }
            }
        }
        return dp[l1][l2];*/
    }
};
